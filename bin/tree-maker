#! /usr/bin/env python3
# -*- Python -*-

"""
======================================================================

Makes phylogenetic tree on the AC cluster.

1. Create a directory on albertine, e.g.
   /syn/eu/ac/results/whocc-tree/<bvic byam h1 h3>/$(date "+%Y-%m%d-%H%M")
   cd to that directory.

2. Export sequences into fasta file, e.g.
   ~/AD/bin/seqdb-export --tree-maker --db ~/AD/data/seqdb.json.xz source.fasta --flu h1 --start-date 20160401 --base-seq 'HAWAII/22/2012 MDCK1'

3. Initilialize tree maker
   ~/AD/bin/tree-maker init

4. Edit tree-maker.config

5. Perform next iteration
   ~/AD/bin/tree-maker step
Or automatically perform all iterations
   ~/AD/bin/tree-maker wait

6. Check progress
   ~/AD/bin/tree-maker state

7. Use tree drawing program to generate pdf with the resulting tree or
   signature page.

======================================================================
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

from acmacs_base import timeit
from tree_maker import config as config_m, maker as maker_m

# ----------------------------------------------------------------------

sCommands = {
    "init": config_m.init,
    "step": maker_m.step,
    "wait": maker_m.wait,
    }

def main(args):
    try:
        cmd = sCommands[args.command[0]]
    except KeyError:
        module_logger.error("Unrecognized command {}\nSupported commands: {}".format(args.command[0], " ".join(sCommands)))
        exit(1)
    cmd(args)

# ----------------------------------------------------------------------

with timeit(sys.argv[0]):
    try:
        import argparse
        parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
        parser.add_argument('command', nargs=1, help="command to perform: " + " ".join(sCommands))
        parser.add_argument('--dir', action='store', dest="working_dir", default=".", help='Path to the working directory.')
        parser.add_argument('--config', action='store', dest="config_file_name", default="tree-maker.config", help='Config file name (without directory) in the working directory.')
        parser.add_argument('--no-email', action='store_false', dest="email", default=True, help='Do not send email on making tree completion/failure.')

        parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
        args = parser.parse_args()
        logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
        exit_code = main(args)
    except Exception as err:
        logging.error('{}\n{}'.format(err, traceback.format_exc()))
        exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
